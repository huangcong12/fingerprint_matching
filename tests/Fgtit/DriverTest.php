<?php

namespace FingerprintMatching\Tests\Fgtit;

use FingerprintMatching\Fgtit\Driver;
use PHPUnit\Framework\TestCase;

class DriverTest extends TestCase
{
	private $fingerPrintCode = [
		1 => 'AwFfEI4A4AbAAsAAwACAAIAAwADAAMAA4ADwAvgC+Ab8Bv4O/37//gAAAAAAAAAAAAAAAAAAAAAdDBb+YYwYvjORV35XF8J+QyeWfnMr2X5WLkM+X7CZnmuemL9RttifMBkBUjWZl9JKidh4Rg3YuEcLwZk6IJa5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBXQ6KAOAOwALAAsACwALAAMAAwADgAvAC8AL4BvgG/A7+Hv/+//4AAAAAAAAAAAAAAAAAAAAAXooYvhkK1pYwDxb+VBUCvkAklh5SK0J+SQSYP2gcGR9uoMMfXq0Y/080WF8tlsDSMhcXUjcd1jkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=',
		2 => 'AwFlEKEA//7//v/+//7//vwO+ALwAPAA4ADgAMAAwADAAOAA4ADwAAAAAAAAAAAAAAAAAAAAAABtI1k+JqSV9j2o1p5hL4N+TcOWHlefGD93ORn3P0BsPz8cFzw4nUDcRTqVXToxwNI/MhdSPzwTe08kWJhSIwJWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',
		3 => 'AwFdDpQA//7/HvAG4ALgAMAAwADAAOAA4ADgAPAA+AD8APwA/gL/BgAAAAAAAAAAAAAAAAAAAABGlFZeapeB3lqo1X5troK+bLgXvycQ7HwuEdRcT6JVPUib2RJIpVL6TidsulJATXpSwyd6QxrA8wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',
		4 => 'AwFZCZ4A//7//v/+//7/BvgA+ADwAOAA4ADgAOAA4ADgAOAA4ADwAAAAAAAAAAAAAAAAAAAAAABllkQebRqaXk4dA35UoFk+VjNZPjY20l4qQ6YeJjym/109mf8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==',
		5 => 'AwFiD54A//78BvgA8ADAAMAAwADAAMAAwADAAMAA4ADgAPAA8AD4AAAAAAAAAAAAAAAAAAAAAABYiEF+PA6WfiiO7N5wmYPeIx4rXlohAv5hJFj+ZrgZHkU8Uj5uwNk+K0GNll0VF786ntU/W7iDv2E7mf0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMBYQ2aAOAOwAIAAAAAAAAAAAAAAAAAAAAAAAAAAgACAALABsAGwA4AAAAAAAAAAAAAAAAAAAAAKAdW3m2IhH5alAN+IZZV3kMagv5KHdk+KjNS3gy3555IDxf/ZxPZX2EY2h9TOdm/TC/YuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=',
	];

	public function testComparedOne()
	{
		$fgtitDriver = new Driver();
		// 两个匹配成功
		$this->assertTrue($fgtitDriver->comparedOne($this->fingerPrintCode[1], $this->fingerPrintCode[2]));
		$this->assertTrue($fgtitDriver->comparedOne($this->fingerPrintCode[1], $this->fingerPrintCode[3]));
		// 1 个匹配失败
		$this->assertFalse($fgtitDriver->comparedOne($this->fingerPrintCode[1], $this->fingerPrintCode[4]));
	}

	public function testComparedMany()
	{
		$fgtitDriver = new Driver();
		// 返回 key = 1
		$this->assertEquals($fgtitDriver->comparedMany($this->fingerPrintCode[2], $this->fingerPrintCode), 1);

		// 返回 key = 5
		$code = 'AwFkCqEA//7//v/+//4A/gA+AD4AHgAeAB4AHgAeAD4APgB+AH4AfgAAAAAAAAAAAAAAAAAAAAAnnoQeDiZCnhSpWN4ZvdfeFJlYf0Sbmv8znxofLSOaPw7AgBISwJaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==';
		$this->assertEquals($fgtitDriver->comparedMany($code, $this->fingerPrintCode), 4);
	}

	public function testSetScope()
	{
		$fgtitDriver = new Driver();
		// 默认情况
		$this->assertEquals($fgtitDriver->licensedScope, $fgtitDriver::NORMAL_SCOPE);
		// 单独设置值的情况
		$this->assertEquals($fgtitDriver->setScope(100)->licensedScope, $fgtitDriver->licensedScope);
	}

	public function testSetUpSafeMode()
	{
		$fgtitDriver = new Driver();
		$this->assertEquals($fgtitDriver->setUpSafeMode()->licensedScope, $fgtitDriver::SAFE_SCOPE);
	}
}